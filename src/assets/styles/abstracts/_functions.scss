// -----------------------------------------------------------------------------
// Functions
// -----------------------------------------------------------------------------

/// Helper: Remove (strip) Units
/// @author Bourbon / Thoughbot
///
/// @parameter {Value} $value -Value, assumed number with unit
///
/// @example  scss - Usage
///   line-height: strip-unit(1.5em);
/// @example css - Output
///   line-height: 1.5;
@function strip-unit($value) {
  @return ($value / ($value * 0 + 1));
}

/// math power
@function pow($base, $exponents) {
  $raised: 1;
  @for $i from 1 through $exponents {
    $raised: $raised * $base;
  }
  @return $raised;
}

/// Return WCAG2.0 relative luminance
/// Helper: Calculate Luminance of a single color
/// @author Sérgio Gomes
/// Adapted from: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
///
/// @require {list} $linear-channel-values (custom)
/// @require {function} nth (core Sass)
/// @require {function} red, green, blue (core Sass)
///
/// @param {Valid Color Value} Color to retreive luminance from
///
/// Note: White luminance is 1, Black luminance is 0
///
/// Note: To be used in other functions or mixins — creates non-standard CSS output:
/// @example scss - Usage
///    .sample { luminance: luminanceOf(#c00); }
///
/// @example css - Output
///    .sample { luminance: 12.83679; }
///
$_luminance-list: .0008 .001 .0011 .0013 .0015 .0017 .002 .0022 .0025 .0027 .003 .0033 .0037 .004 .0044 .0048 .0052 .0056 .006 .0065 .007 .0075 .008 .0086 .0091 .0097 .0103 .011 .0116 .0123 .013 .0137 .0144 .0152 .016 .0168 .0176 .0185 .0194 .0203 .0212 .0222 .0232 .0242 .0252 .0262 .0273 .0284 .0296 .0307 .0319 .0331 .0343 .0356 .0369 .0382 .0395 .0409 .0423 .0437 .0452 .0467 .0482 .0497 .0513 .0529 .0545 .0561 .0578 .0595 .0612 .063 .0648 .0666 .0685 .0704 .0723 .0742 .0762 .0782 .0802 .0823 .0844 .0865 .0887 .0908 .0931 .0953 .0976 .0999 .1022 .1046 .107 .1095 .1119 .1144 .117 .1195 .1221 .1248 .1274 .1301 .1329 .1356 .1384 .1413 .1441 .147 .15 .1529 .1559 .159 .162 .1651 .1683 .1714 .1746 .1779 .1812 .1845 .1878 .1912 .1946 .1981 .2016 .2051 .2086 .2122 .2159 .2195 .2232 .227 .2307 .2346 .2384 .2423 .2462 .2502 .2542 .2582 .2623 .2664 .2705 .2747 .2789 .2831 .2874 .2918 .2961 .3005 .305 .3095 .314 .3185 .3231 .3278 .3325 .3372 .3419 .3467 .3515 .3564 .3613 .3663 .3712 .3763 .3813 .3864 .3916 .3968 .402 .4072 .4125 .4179 .4233 .4287 .4342 .4397 .4452 .4508 .4564 .4621 .4678 .4735 .4793 .4851 .491 .4969 .5029 .5089 .5149 .521 .5271 .5333 .5395 .5457 .552 .5583 .5647 .5711 .5776 .5841 .5906 .5972 .6038 .6105 .6172 .624 .6308 .6376 .6445 .6514 .6584 .6654 .6724 .6795 .6867 .6939 .7011 .7084 .7157 .7231 .7305 .7379 .7454 .7529 .7605 .7682 .7758 .7835 .7913 .7991 .807 .8148 .8228 .8308 .8388 .8469 .855 .8632 .8714 .8796 .8879 .8963 .9047 .9131 .9216 .9301 .9387 .9473 .956 .9647 .9734 .9823 .9911 1;
@function luminanceOf($color) {
  $rgb: (
    "r": red($color),
    "g": green($color),
    "b": blue($color)
  );

  @each $name, $value in $rgb {
    $value: if($value / 255 < .03928, $value / 255 / 12.92, nth($_luminance-list, $value + 1));
    $rgb: map-merge($rgb, ($name: $value));
  }

  @return 100 * ((map-get($rgb, "r") * .2126) + (map-get($rgb, "g") * .7152) + (map-get($rgb, "b") * .0722));
}

/// Helper: Calculate "readability" as defined by WCAG 2.1
/// @author Sérgio Gomes and J. Hogue
/// Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
///
/// @require {function} luminance (Custom)
/// @require {function} round (core Sass)
///
/// @param {Valid Color Value} Color 1
/// @param {Valid Color Value} Color 2
///
/// Note: Low contrast is 0, High contrast is 21.0
///
/// Note: To be used in other functions or mixins — creates non-standard CSS output:
/// @example scss - Usage
///    .sample { contrast-ratio: contrast-ratio(#c00, #fff); }
///
/// @example css - Output
///    .sample { contrast-ratio: 5.89; }
///
@function contrast-ratio($fg, $bg) {
  $luminance1: luminanceOf($fg) + 0.05;
  $luminance2: luminanceOf($bg) + 0.05;
  $ratio: $luminance1 / $luminance2;
  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }
  // Round to a hundreth because 6.96 should not pass a ratio of 7.0
  $ratio: round($ratio * 100) / 100;
  @return $ratio;
}

/// Helper: Depending on the unit recalculate a font size value into unitless pixels
/// @author J. Hogue
///
/// @require {function} unit (core Sass)
/// @require {function} strip-unit (custom)
///
/// @param {String} Number with or without unit
///
/// Note: To be used in other functions or mixins — creates non-standard CSS output:
/// @example scss - Usage
///    .sample { validate-font-size: validate-font-size(1em); }
///
/// @example css - Output
///    .sample { validate-font-size: 16; }
///
@function validate-font-size($size) {
  // If it is already unitless, quickly return it
  @if unit($size) == '' {
    @return $size;
  } @else if unit($size) == 'px' {
    // We expect PX, so strip the value and return it
    @return strip-unit($size);
  } @else if unit($size) == 'em' or unit($size) == 'rem' {
    // Need to convert to a pixel value. Let's not overcomplicate it with possible EM inheritence scale factors
    @return strip-unit($size * 16);
  } @else {
    // Did our best. If an unexpected unit was supplied, let people know
    @error 'validate-font-size(): An unexpected font-size unit was supplied. PX, EM, or REM supported.';
  }
}

/// Helper: Determine the correct ratio value to use based on font-size and WCAG Level
/// @author J. Hogue
///
/// @require {function} validate-font-size (custom)
///
/// @param {String} Level. 'AA' or 'AAA' expected, 'AA' default
/// @param {Number} Font size in unitless px expected, 16 default
/// @param {Boolean} Whether or not the fontis bold, false default
///
/// Note: To be used in other functions or mixins — creates non-standard CSS output:
/// @example scss - Usage
///    .sample { get-ratio: get-ratio('AAA', 19, true); }
///
/// @example css - Output
///    .sample { get-ratio: 4.5; }
///
@function get-ratio($level: 'AAA', $size: 16, $bold: false) {
  // Default ratios
  $ratio: 4.5;
  @if $level == 'AAA' {
    $ratio: 7;
  }

  // Make sure the size is valid
  $size: validate-font-size($size);

  // Check font size
  @if $size < 24 {
    // Small text, use defaults
    // But:
    @if $size >= 19 and $bold == true {
      // Special case: small text but also bold
      @if $level == 'AAA' {
        $ratio: 4.5;
      } @else {
        $ratio: 3;
      }
    }
  } @else {
    // 24 or larger
    $ratio: 3;
    @if $level == 'AAA' {
      $ratio: 4.5;
    }
  }
  @return $ratio;
}

/// Helper: Use contrast against white or black to determine if a color is "light" or "dark"
/// @author Sérgio Gomes and J. Hogue
/// Adapted from: https://medium.com/dev-channel/using-sass-to-automatically-pick-text-colors-4ba7645d2796
///
/// @require {function} contrast-ratio (custom)
///
/// @param {String} {Valid Color Value} Color
///
/// Note: To be used in other functions or mixins — creates non-standard CSS output:
/// @example scss - Usage
///    .sample { light-or-dark: light-or-dark(#c00); }
///
/// @example css - Output
///    .sample { light-or-dark: "light"; }
///
@function light-or-dark($color) {
  // Check how the color performs against white and black
  $light-contrast: contrast-ratio($color, white);
  $dark-contrast: contrast-ratio($color, black);

  @if $light-contrast > $dark-contrast {
    // Contrast against white is higher than against black, so, this is a dark color
    @return "dark";
  } @else {
    @return "light";
  }
}

/// Also useful: Given one color, which is most readable with it, black or white?
/// @author Sérgio Gomes and J. Hogue
///
/// @require {function} light-or-dark (custom)
///
/// @param {String} {Valid Color Value} Color
///
/// @example scss - Usage
///     .sample {
///       background-color: #c00;
///       color: high-contrast-color(#c00);
///     }
///
/// @example css - Output
///     .sample {
///       background-color: #c00;
///       color: #fff;
///     }
///
@function high-contrast-color($color) {
  $color-lod: light-or-dark($color);

  @if ($color-lod == "dark") {
    @return white;
  } @else {
    @return black;
  }
}

/// Return a color that passes for the chosen WCAG level without changing the Hue of the color
/// @author A. Hosseini, J. Hogue
///
/// @require {function} validate-font-size (custom)
/// @require {function} get-ratio (custom)
/// @require {function} contrast-ratio (custom)
/// @require {function} light-or-dark (custom)
/// @require {function} scale-color (core Sass)
///
/// @param {String} {Valid Color Value} Color 1
/// @param {String} {Valid Color Value} Color 2
/// @param {String} Level. 'AA' or 'AAA' expected, 'AA' default
/// @param {Number} Font size in unitless px expected, 16 default
/// @param {Boolean} Whether or not the fontis bold, false default
///
/// @example scss - Usage
///     .sample {
///       background-color: #000;
///       color: a11y-color(#c0c, #000);
///     }
///
/// @example css - Output
///     .sample {
///       background-color: #000;
///       color: #d200d2;
///     }
///
@function a11y-color($foreground, $background, $level: 'AA', $size: 16, $bold: false) {
  // Helper: make sure the font size value is acceptable
  $font-size: validate-font-size($size);
  // $threshold: 4.5; // 4.5 = WCAG AA,7= WCAG AAA
  // $threshold: 5.0;
  // Helper: With the level, font size, and bold boolean, return the proper target ratio. 3.0, 4.5, or 7.0 expected
  $threshold: get-ratio($level, $font-size, $bold);
  $percent: 0;
  @while $percent < 100 {
    $lighter: lighten($foreground, $percent);
    $darker: darken($foreground, $percent);
    $darker-ratio: contrast-ratio($background, $darker);
    $lighter-ratio: contrast-ratio($background, $lighter);

    @if ($darker-ratio > $lighter-ratio) {
      @if ($darker-ratio > $threshold) {
        @return $darker;
      }
    }
    @if ($lighter-ratio > $darker-ratio) {
      @if ($lighter-ratio > $threshold) {
        @return $lighter;
      }
    }
    $percent: $percent + 2;
  }
  // Couldn't find an answer
  @return if(lightness($foreground) < 51, #000, #FFF);
}

/// Converts hex to rgb form
/// @param {String} {Valid Color Value}
/// @param {Boolean} {Value in rgb() function or values only} 2
@function toRGB ($color, $value:false) {
  $rgb: red($color) + ", " + green($color) + ", " + blue($color);
  @if $value {
    @return $rgb
  }
  @return "rgb(" + $rgb + ")";
}
